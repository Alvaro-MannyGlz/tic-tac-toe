# Use the provided images and a Python GUI library of your choice to create a simple Tic-tac-toe game.
# Tkinter library

import tkinter as tk
from tkinter import messagebox

curr_player = "X"
board = [["" for _ in range(3)] for _ in range(3)] # 3x3 Board size
game_buttons = [] # store cell objects

# Win and Tie Conditions

def check_win():
    # Horizontal win
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != "":
            return True
    # Vertical win
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != "":
            return True
    # Diagonal 
    if board[0][0] == board[1][1] == board[2][2] != "":
        return True
    if board[0][2] == board[1][1] == board[2][0] != "":
        return True
    return False

def check_tie():
    # If any cell is empty, it's not a tie
    for row in range(3):
        for col in range(3):
            if board[row][col] == "":
                return False
    return True

# Again? (Reset the game)
def reset_game():
    global curr_player, board
    curr_player = "X"
    for row in range(3):
        for col in range(3):
            board[row][col] = ""
            game_buttons[row][col].config(text="", state=tk.NORMAL) # Clear text and enable

# Handle a button click for a cell
def button_click(row, col):
    global curr_player
    # Only allow move if cell is empty
    if board[row][col] == "":
        board[row][col] = curr_player
        game_buttons[row][col].config(text=curr_player)
        # Check for win or tie after every move
        if check_win():
            messagebox.showinfo("Game Over", f"Player {curr_player} wins!")
            # Disable all buttons after win
            for r in range(3):
                for c in range(3):
                    game_buttons[r][c].config(state=tk.DISABLED)
        elif check_tie():
            messagebox.showinfo("Game Over", "It's a tie!")
            # Disable all buttons after tie
            for r in range(3):
                for c in range(3):
                    game_buttons[r][c].config(state=tk.DISABLED)
        else:
            # Switch to the other player
            curr_player = "O" if curr_player == "X" else "X"

# Tkinter window setup
root = tk.Tk()
root.title("Tic-Tac-Toe")

# Build our buttons (3x3 grid)
for row in range(3):
    button_row = []
    for col in range(3):
        # Each button calls button_click with its row and col
        button = tk.Button(root, text="", font=("Arial", 20), width=5, height=2,
                           command=lambda r=row, c=col: button_click(r, c))
        button.grid(row=row, column=col, padx=5, pady=10) # Adjusting where buttons are located 
        button_row.append(button)
    game_buttons.append(button_row)

# Add a reset button below the grid
reset_button = tk.Button(root, text="Reset Game", font=("Arial", 16), command=reset_game)
reset_button.grid(row=3, column=0, columnspan=3, pady=10)

# Run the whole thing
root.mainloop()